// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: lunch.proto

package tlunch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tlunch_Register_FullMethodName        = "/tlunch.Tlunch/Register"
	Tlunch_Login_FullMethodName           = "/tlunch.Tlunch/Login"
	Tlunch_Refresh_FullMethodName         = "/tlunch.Tlunch/Refresh"
	Tlunch_GetProfile_FullMethodName      = "/tlunch.Tlunch/GetProfile"
	Tlunch_ChangeProfile_FullMethodName   = "/tlunch.Tlunch/ChangeProfile"
	Tlunch_GetLunches_FullMethodName      = "/tlunch.Tlunch/GetLunches"
	Tlunch_CreateLunch_FullMethodName     = "/tlunch.Tlunch/CreateLunch"
	Tlunch_JoinLunch_FullMethodName       = "/tlunch.Tlunch/JoinLunch"
	Tlunch_LeaveLunch_FullMethodName      = "/tlunch.Tlunch/LeaveLunch"
	Tlunch_GetDetailLunch_FullMethodName  = "/tlunch.Tlunch/GetDetailLunch"
	Tlunch_GetLunchHistory_FullMethodName = "/tlunch.Tlunch/GetLunchHistory"
	Tlunch_RateLunch_FullMethodName       = "/tlunch.Tlunch/RateLunch"
)

// TlunchClient is the client API for Tlunch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TlunchClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	GetProfile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	ChangeProfile(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetLunches(ctx context.Context, in *LunchRequest, opts ...grpc.CallOption) (*GetLunchesResponse, error)
	CreateLunch(ctx context.Context, in *CreateLunchRequest, opts ...grpc.CallOption) (*LunchResponse, error)
	JoinLunch(ctx context.Context, in *ActionLunchRequest, opts ...grpc.CallOption) (*LunchResponse, error)
	LeaveLunch(ctx context.Context, in *ActionLunchRequest, opts ...grpc.CallOption) (*LunchResponse, error)
	GetDetailLunch(ctx context.Context, in *DetailLunchRequest, opts ...grpc.CallOption) (*DetailLunchResponse, error)
	GetLunchHistory(ctx context.Context, in *LunchRequest, opts ...grpc.CallOption) (*LunchHistoryResponse, error)
	RateLunch(ctx context.Context, in *RateLunchRequest, opts ...grpc.CallOption) (*LunchFeedback, error)
}

type tlunchClient struct {
	cc grpc.ClientConnInterface
}

func NewTlunchClient(cc grpc.ClientConnInterface) TlunchClient {
	return &tlunchClient{cc}
}

func (c *tlunchClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Tlunch_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Tlunch_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, Tlunch_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) GetProfile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Tlunch_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) ChangeProfile(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Tlunch_ChangeProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) GetLunches(ctx context.Context, in *LunchRequest, opts ...grpc.CallOption) (*GetLunchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLunchesResponse)
	err := c.cc.Invoke(ctx, Tlunch_GetLunches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) CreateLunch(ctx context.Context, in *CreateLunchRequest, opts ...grpc.CallOption) (*LunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LunchResponse)
	err := c.cc.Invoke(ctx, Tlunch_CreateLunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) JoinLunch(ctx context.Context, in *ActionLunchRequest, opts ...grpc.CallOption) (*LunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LunchResponse)
	err := c.cc.Invoke(ctx, Tlunch_JoinLunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) LeaveLunch(ctx context.Context, in *ActionLunchRequest, opts ...grpc.CallOption) (*LunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LunchResponse)
	err := c.cc.Invoke(ctx, Tlunch_LeaveLunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) GetDetailLunch(ctx context.Context, in *DetailLunchRequest, opts ...grpc.CallOption) (*DetailLunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailLunchResponse)
	err := c.cc.Invoke(ctx, Tlunch_GetDetailLunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) GetLunchHistory(ctx context.Context, in *LunchRequest, opts ...grpc.CallOption) (*LunchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LunchHistoryResponse)
	err := c.cc.Invoke(ctx, Tlunch_GetLunchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlunchClient) RateLunch(ctx context.Context, in *RateLunchRequest, opts ...grpc.CallOption) (*LunchFeedback, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LunchFeedback)
	err := c.cc.Invoke(ctx, Tlunch_RateLunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TlunchServer is the server API for Tlunch service.
// All implementations must embed UnimplementedTlunchServer
// for forward compatibility.
type TlunchServer interface {
	Register(context.Context, *RegisterRequest) (*User, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	GetProfile(context.Context, *UserRequest) (*User, error)
	ChangeProfile(context.Context, *User) (*User, error)
	GetLunches(context.Context, *LunchRequest) (*GetLunchesResponse, error)
	CreateLunch(context.Context, *CreateLunchRequest) (*LunchResponse, error)
	JoinLunch(context.Context, *ActionLunchRequest) (*LunchResponse, error)
	LeaveLunch(context.Context, *ActionLunchRequest) (*LunchResponse, error)
	GetDetailLunch(context.Context, *DetailLunchRequest) (*DetailLunchResponse, error)
	GetLunchHistory(context.Context, *LunchRequest) (*LunchHistoryResponse, error)
	RateLunch(context.Context, *RateLunchRequest) (*LunchFeedback, error)
	mustEmbedUnimplementedTlunchServer()
}

// UnimplementedTlunchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTlunchServer struct{}

func (UnimplementedTlunchServer) Register(context.Context, *RegisterRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTlunchServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTlunchServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedTlunchServer) GetProfile(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedTlunchServer) ChangeProfile(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProfile not implemented")
}
func (UnimplementedTlunchServer) GetLunches(context.Context, *LunchRequest) (*GetLunchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLunches not implemented")
}
func (UnimplementedTlunchServer) CreateLunch(context.Context, *CreateLunchRequest) (*LunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLunch not implemented")
}
func (UnimplementedTlunchServer) JoinLunch(context.Context, *ActionLunchRequest) (*LunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLunch not implemented")
}
func (UnimplementedTlunchServer) LeaveLunch(context.Context, *ActionLunchRequest) (*LunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLunch not implemented")
}
func (UnimplementedTlunchServer) GetDetailLunch(context.Context, *DetailLunchRequest) (*DetailLunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailLunch not implemented")
}
func (UnimplementedTlunchServer) GetLunchHistory(context.Context, *LunchRequest) (*LunchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLunchHistory not implemented")
}
func (UnimplementedTlunchServer) RateLunch(context.Context, *RateLunchRequest) (*LunchFeedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLunch not implemented")
}
func (UnimplementedTlunchServer) mustEmbedUnimplementedTlunchServer() {}
func (UnimplementedTlunchServer) testEmbeddedByValue()                {}

// UnsafeTlunchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TlunchServer will
// result in compilation errors.
type UnsafeTlunchServer interface {
	mustEmbedUnimplementedTlunchServer()
}

func RegisterTlunchServer(s grpc.ServiceRegistrar, srv TlunchServer) {
	// If the following call pancis, it indicates UnimplementedTlunchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tlunch_ServiceDesc, srv)
}

func _Tlunch_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).GetProfile(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_ChangeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).ChangeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_ChangeProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).ChangeProfile(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_GetLunches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).GetLunches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_GetLunches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).GetLunches(ctx, req.(*LunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_CreateLunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).CreateLunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_CreateLunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).CreateLunch(ctx, req.(*CreateLunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_JoinLunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).JoinLunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_JoinLunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).JoinLunch(ctx, req.(*ActionLunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_LeaveLunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).LeaveLunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_LeaveLunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).LeaveLunch(ctx, req.(*ActionLunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_GetDetailLunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailLunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).GetDetailLunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_GetDetailLunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).GetDetailLunch(ctx, req.(*DetailLunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_GetLunchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).GetLunchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_GetLunchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).GetLunchHistory(ctx, req.(*LunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tlunch_RateLunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlunchServer).RateLunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tlunch_RateLunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlunchServer).RateLunch(ctx, req.(*RateLunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tlunch_ServiceDesc is the grpc.ServiceDesc for Tlunch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tlunch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tlunch.Tlunch",
	HandlerType: (*TlunchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Tlunch_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Tlunch_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Tlunch_Refresh_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Tlunch_GetProfile_Handler,
		},
		{
			MethodName: "ChangeProfile",
			Handler:    _Tlunch_ChangeProfile_Handler,
		},
		{
			MethodName: "GetLunches",
			Handler:    _Tlunch_GetLunches_Handler,
		},
		{
			MethodName: "CreateLunch",
			Handler:    _Tlunch_CreateLunch_Handler,
		},
		{
			MethodName: "JoinLunch",
			Handler:    _Tlunch_JoinLunch_Handler,
		},
		{
			MethodName: "LeaveLunch",
			Handler:    _Tlunch_LeaveLunch_Handler,
		},
		{
			MethodName: "GetDetailLunch",
			Handler:    _Tlunch_GetDetailLunch_Handler,
		},
		{
			MethodName: "GetLunchHistory",
			Handler:    _Tlunch_GetLunchHistory_Handler,
		},
		{
			MethodName: "RateLunch",
			Handler:    _Tlunch_RateLunch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lunch.proto",
}
