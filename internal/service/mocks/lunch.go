// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/t-lunch/t-lunch-backend/internal/service (interfaces: LunchRepo)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/lunch.go -package=mocks . LunchRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/t-lunch/t-lunch-backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockLunchRepo is a mock of LunchRepo interface.
type MockLunchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLunchRepoMockRecorder
	isgomock struct{}
}

// MockLunchRepoMockRecorder is the mock recorder for MockLunchRepo.
type MockLunchRepoMockRecorder struct {
	mock *MockLunchRepo
}

// NewMockLunchRepo creates a new mock instance.
func NewMockLunchRepo(ctrl *gomock.Controller) *MockLunchRepo {
	mock := &MockLunchRepo{ctrl: ctrl}
	mock.recorder = &MockLunchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLunchRepo) EXPECT() *MockLunchRepoMockRecorder {
	return m.recorder
}

// CreateLunch mocks base method.
func (m *MockLunchRepo) CreateLunch(ctx context.Context, lunch *models.Lunch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLunch", ctx, lunch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLunch indicates an expected call of CreateLunch.
func (mr *MockLunchRepoMockRecorder) CreateLunch(ctx, lunch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLunch", reflect.TypeOf((*MockLunchRepo)(nil).CreateLunch), ctx, lunch)
}

// GetLunchByID mocks base method.
func (m *MockLunchRepo) GetLunchByID(ctx context.Context, id int64) (*models.Lunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunchByID", ctx, id)
	ret0, _ := ret[0].(*models.Lunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunchByID indicates an expected call of GetLunchByID.
func (mr *MockLunchRepoMockRecorder) GetLunchByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLunchByID", reflect.TypeOf((*MockLunchRepo)(nil).GetLunchByID), ctx, id)
}

// GetLunchIdByUserID mocks base method.
func (m *MockLunchRepo) GetLunchIdByUserID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunchIdByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunchIdByUserID indicates an expected call of GetLunchIdByUserID.
func (mr *MockLunchRepoMockRecorder) GetLunchIdByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLunchIdByUserID", reflect.TypeOf((*MockLunchRepo)(nil).GetLunchIdByUserID), ctx, userID)
}

// GetLunches mocks base method.
func (m *MockLunchRepo) GetLunches(ctx context.Context, userID int64, offset, limit int) ([]*models.Lunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunches", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]*models.Lunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunches indicates an expected call of GetLunches.
func (mr *MockLunchRepoMockRecorder) GetLunches(ctx, userID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLunches", reflect.TypeOf((*MockLunchRepo)(nil).GetLunches), ctx, userID, offset, limit)
}

// GetUsersLunches mocks base method.
func (m *MockLunchRepo) GetUsersLunches(ctx context.Context, userID int64, offset, limit int) ([]*models.Lunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLunches", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]*models.Lunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLunches indicates an expected call of GetUsersLunches.
func (mr *MockLunchRepoMockRecorder) GetUsersLunches(ctx, userID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLunches", reflect.TypeOf((*MockLunchRepo)(nil).GetUsersLunches), ctx, userID, offset, limit)
}

// UpdateLunchLikedBy mocks base method.
func (m *MockLunchRepo) UpdateLunchLikedBy(ctx context.Context, method models.UpdateAction, lunchID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLunchLikedBy", ctx, method, lunchID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLunchLikedBy indicates an expected call of UpdateLunchLikedBy.
func (mr *MockLunchRepoMockRecorder) UpdateLunchLikedBy(ctx, method, lunchID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLunchLikedBy", reflect.TypeOf((*MockLunchRepo)(nil).UpdateLunchLikedBy), ctx, method, lunchID, userID)
}

// UpdateLunchParticipants mocks base method.
func (m *MockLunchRepo) UpdateLunchParticipants(ctx context.Context, method models.UpdateAction, lunchID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLunchParticipants", ctx, method, lunchID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLunchParticipants indicates an expected call of UpdateLunchParticipants.
func (mr *MockLunchRepoMockRecorder) UpdateLunchParticipants(ctx, method, lunchID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLunchParticipants", reflect.TypeOf((*MockLunchRepo)(nil).UpdateLunchParticipants), ctx, method, lunchID, userID)
}
